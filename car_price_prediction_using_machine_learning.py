# -*- coding: utf-8 -*-
"""Car price Prediction using Machine learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GgTWxYKEfGP_Gzm-_dSYHQrW7OKgtWOG

# Importing the libraries
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn import metrics

"""# Data Collection and Preprocessing"""

#loading the data from csv file to pandas dataframe
df=pd.read_csv('/content/car data.csv')

df.head()

df.tail()

df.shape

df.info()

df.describe()

df.isnull()

#checking the missing value of rows and column
df.isnull().sum()

#checking the distribution od categorical data
df['Fuel_Type'].value_counts()

df['Selling_type'].value_counts()

df['Transmission'].value_counts()

"""Label Encoding"""

#encoding "fuel type "column
df.replace({'Fuel_Type':{'Petrol':0,'Diesel':1,'CNG':2}},inplace=True)

#encoding "Selling_type" column
df.replace({'Selling_type':{'Dealer':0,'Individual':1}},inplace=True)

#encoding "Transmission" column
df.replace({'Transmission':{'Manual':0,'Automatic':1}},inplace=True)

df.head()

"""Splitting the data and target"""

x = df.drop(['Car_Name','Selling_Price'],axis=1)
y = df['Selling_Price']

print(x)

print(y)

"""splitting training and test data"""

x_train,x_test,y_train,y_test=train_test_split(x,y, test_size=0.1, random_state=2)

"""Model training"""

#loading linear regression model
lin_reg_model = LinearRegression()

lin_reg_model.fit(x_train,y_train)

"""Model Evaluation"""

#perediction on training data
training_data_prediction = lin_reg_model.predict(x_train)

#R squared error
error_score = metrics.r2_score(y_train,training_data_prediction)

print("R Squared Error:",error_score)

"""Visualize the actual prices and predicted prices"""

plt.scatter(y_train,training_data_prediction)
plt.xlabel('Actual prices')
plt.ylabel('Predicted prices')
plt.title("Actual prices v/s Predicted values")
plt.show()

plt.figure(figsize=(10,7))
sns.heatmap(df.corr(),annot=True)
plt.title("correlation between the columns")
plt.show()

# prediction on testing data
test_data_prediction=lin_reg_model.predict(x_test)

#R squared error
error_score = metrics.r2_score(y_test,test_data_prediction)
print("R Squared Error:",error_score)

plt.scatter(y_test,test_data_prediction)
plt.xlabel('Actual prices')
plt.ylabel('Predicted prices')
plt.title("Actual prices v/s Predicted values")
plt.show()